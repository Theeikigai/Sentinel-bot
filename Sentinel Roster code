client.on('interactionCreate', async (interaction) => {
  if (interaction.isChatInputCommand()) {
    // your slash command handler here
    // like command collection stuff
  }

  if (interaction.isButton()) {
    const [action, type] = interaction.customId.split('_');
    const TeamRoster = require('./models/TeamRoster');
    const StaffRoster = require('./models/StaffRoster');
    const dbModel = type === 'team' ? TeamRoster : StaffRoster;

    let rosterDoc = await dbModel.findOne({ guildId: interaction.guild.id });
    if (!rosterDoc) rosterDoc = new dbModel({ guildId: interaction.guild.id, members: [] });

    if (action === 'add') {
      if (!rosterDoc.members.includes(interaction.user.id)) {
        rosterDoc.members.push(interaction.user.id);
        await rosterDoc.save();
        return interaction.reply({ content: 'You were added to the roster!', ephemeral: true });
      } else {
        return interaction.reply({ content: 'You are already on the roster.', ephemeral: true });
      }
    }

    if (action === 'remove') {
      const index = rosterDoc.members.indexOf(interaction.user.id);
      if (index !== -1) {
        rosterDoc.members.splice(index, 1);
        await rosterDoc.save();
        return interaction.reply({ content: 'You were removed from the roster.', ephemeral: true });
      } else {
        return interaction.reply({ content: 'You are not on the roster.', ephemeral: true });
      }
    }

    if (action === 'refresh') {
      const embed = new EmbedBuilder()
        .setTitle(`${type.charAt(0).toUpperCase() + type.slice(1)} Roster`)
        .setDescription(
          rosterDoc.members.length > 0
            ? rosterDoc.members.map((id, i) => `**${i + 1}.** <@${id}>`).join('\n')
            : '*No members in the roster yet.*'
        )
        .setColor(0x3498db);

      return interaction.update({ embeds: [embed] });
    }
  }
});