const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

const BOT_OWNER_ID = 'YOUR_USER_ID_HERE'; // Replace with your actual Discord user ID
const FULL_ACCESS_ROLE_NAME = 'Full Access';

module.exports = {
  data: [
    new SlashCommandBuilder()
      .setName('give')
      .setDescription('Give complete bot access to a user')
      .addUserOption(option =>
        option.setName('user')
          .setDescription('User to give access to')
          .setRequired(true))
      .addStringOption(option =>
        option.setName('duration')
          .setDescription('Subscription duration: monthly or yearly')
          .setRequired(true)
          .addChoices(
            { name: 'Monthly', value: '30' },
            { name: 'Yearly', value: '365' }
          )),
    
    new SlashCommandBuilder()
      .setName('revoke')
      .setDescription('Revoke complete bot access from a user')
      .addUserOption(option =>
        option.setName('user')
          .setDescription('User to revoke access from')
          .setRequired(true))
  ],

  async execute(interaction) {
    const commandName = interaction.commandName;

    // Only bot creator can use these commands
    if (interaction.user.id !== BOT_OWNER_ID) {
      return interaction.reply({ content: 'Only the bot creator can use this command.', ephemeral: true });
    }

    const member = interaction.options.getUser('user');
    const guildMember = await interaction.guild.members.fetch(member.id).catch(() => null);

    if (!guildMember) {
      return interaction.reply({ content: 'User not found in this server.', ephemeral: true });
    }

    const role = interaction.guild.roles.cache.find(r => r.name === FULL_ACCESS_ROLE_NAME);
    if (!role) {
      return interaction.reply({ content: `Role "${FULL_ACCESS_ROLE_NAME}" not found. Please create it first.`, ephemeral: true });
    }

    if (commandName === 'give') {
      const duration = parseInt(interaction.options.getString('duration'), 10);
      await guildMember.roles.add(role);

      // Set timeout to remove role after duration
      setTimeout(async () => {
        const stillMember = await interaction.guild.members.fetch(member.id).catch(() => null);
        if (stillMember?.roles.cache.has(role.id)) {
          await stillMember.roles.remove(role);
          stillMember.send('Your subscription has ended. You no longer have access to premium bot features.');
        }
      }, duration * 24 * 60 * 60 * 1000); // Days -> milliseconds

      await member.send(`You now have **Full Access** to all Sentinel bot features for ${duration} days.`);
      return interaction.reply({ content: `Gave access to ${member.tag} for ${duration} days.`, ephemeral: true });

    } else if (commandName === 'revoke') {
      await guildMember.roles.remove(role);
      await member.send('Your Sentinel bot access has been revoked.');
      return interaction.reply({ content: `Revoked access from ${member.tag}.`, ephemeral: true });
    }
  }
};